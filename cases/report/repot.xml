<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="7.321" timestamp="2022-01-22T15:14:27.982081" hostname="DESKTOP-0MQ68V5"><testcase classname="test_case" name="test_01_search" time="6.782"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[@id=&quot;1&quot;]/div/div/h3/a/em&quot;}&#10;  (Session info: chrome=96.0.4664.45)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00276903+2517251]&#10;&#09;Ordinal0 [0x0020F8E1+2095329]&#10;&#09;Ordinal0 [0x00112848+1058888]&#10;&#09;Ordinal0 [0x0013D448+1233992]&#10;&#09;Ordinal0 [0x0013D63B+1234491]&#10;&#09;Ordinal0 [0x00167812+1406994]&#10;&#09;Ordinal0 [0x0015650A+1336586]&#10;&#09;Ordinal0 [0x00165BBF+1399743]&#10;&#09;Ordinal0 [0x0015639B+1336219]&#10;&#09;Ordinal0 [0x001327A7+1189799]&#10;&#09;Ordinal0 [0x00133609+1193481]&#10;&#09;GetHandleVerifier [0x00405904+1577972]&#10;&#09;GetHandleVerifier [0x004B0B97+2279047]&#10;&#09;GetHandleVerifier [0x00306D09+534521]&#10;&#09;GetHandleVerifier [0x00305DB9+530601]&#10;&#09;Ordinal0 [0x00214FF9+2117625]&#10;&#09;Ordinal0 [0x002198A8+2136232]&#10;&#09;Ordinal0 [0x002199E2+2136546]&#10;&#09;Ordinal0 [0x00223541+2176321]&#10;&#09;BaseThreadInitThunk [0x751A6359+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77587B74+228]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77587B44+180]&#10;&#09;(No symbol) [0x00000000]">def test_01_search():
        kd = KeyDemo('Chrome')
        kd.open('http://www.baidu.com')
        kd.wait(3)
        print(kd.title())
        kd.input('id','kw','深岩银河')
        kd.click('id','su')
&gt;       wc=kd.loctor('xpath','//*[@id="1"]/div/div/h3/a/em').text

test_case.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\keywords\key_word_demo.py:30: in loctor
    return self.driver.find_element(name,value)
c:\program files\python38\lib\site-packages\selenium\webdriver\remote\webdriver.py:1244: in find_element
    return self.execute(Command.FIND_ELEMENT, {
c:\program files\python38\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024F3AA32CD0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...jectPath [0x77587B74+228]\\n\\tRtlGetAppContainerNamedObjectPath [0x77587B44+180]\\n\\t(No symbol) [0x00000000]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id="1"]/div/div/h3/a/em"}
E         (Session info: chrome=96.0.4664.45)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00276903+2517251]
E       	Ordinal0 [0x0020F8E1+2095329]
E       	Ordinal0 [0x00112848+1058888]
E       	Ordinal0 [0x0013D448+1233992]
E       	Ordinal0 [0x0013D63B+1234491]
E       	Ordinal0 [0x00167812+1406994]
E       	Ordinal0 [0x0015650A+1336586]
E       	Ordinal0 [0x00165BBF+1399743]
E       	Ordinal0 [0x0015639B+1336219]
E       	Ordinal0 [0x001327A7+1189799]
E       	Ordinal0 [0x00133609+1193481]
E       	GetHandleVerifier [0x00405904+1577972]
E       	GetHandleVerifier [0x004B0B97+2279047]
E       	GetHandleVerifier [0x00306D09+534521]
E       	GetHandleVerifier [0x00305DB9+530601]
E       	Ordinal0 [0x00214FF9+2117625]
E       	Ordinal0 [0x002198A8+2136232]
E       	Ordinal0 [0x002199E2+2136546]
E       	Ordinal0 [0x00223541+2176321]
E       	BaseThreadInitThunk [0x751A6359+25]
E       	RtlGetAppContainerNamedObjectPath [0x77587B74+228]
E       	RtlGetAppContainerNamedObjectPath [0x77587B44+180]
E       	(No symbol) [0x00000000]

c:\program files\python38\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase></testsuite></testsuites>